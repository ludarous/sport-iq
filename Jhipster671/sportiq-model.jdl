enum Sex {
	MALE, FEMALE, OTHER
}

enum ResultType {
	LESS_IS_BETTER, MORE_IS_BETTER
}

enum Laterality {
    LEFT, RIGHT
}

entity Event {
	name String required,
    date ZonedDateTime
}


entity Workout {
	name String required,
    description String
}

entity Activity {
   	name String required,
    description String,
    help String,
    minAge Integer,
    maxAge Integer
}

entity ActivityResult {
	name String,
    resultType ResultType
    ratingWeight Float,
    mainResult Boolean,
    order Integer,
    irvBest Float,
    irvWorst Float
}

entity ActivityResultSplit {
	splitValue Float,
}

entity WorkoutCategory {
	name String required,
    description String
}

entity ActivityCategory {
	name String required,
    description String
}

entity AthleteEvent {
	note String,
    actualHeightInCm Float,
    actualWeightInKg Float,
    medicalFitnessAgreement Boolean,
    registrationDate ZonedDateTime
}

entity AthleteWorkout {
    note String
}

entity AthleteActivity {
    note String,
    date ZonedDateTime
}

entity AthleteActivityResult {
	value Float,
	compareValue Float
}

entity AthleteActivityResultSplit {
	value Float,
	compareValue Float
}

entity Athlete {
	firstName String required,
    lastName String required,
    email String required,
    phone String,
    birthDate ZonedDateTime,
    nationality String,
    sex Sex,
    country String,
    city String,
    street String,
    zipCode String,
    handLaterality Laterality,
    footLaterality Laterality,
    steppingFoot Laterality,
    termsAgreement Boolean,
    gdprAgreement Boolean,
    photographyAgreement Boolean,
    medicalFitnessAgreement Boolean,
    marketingAgreement Boolean,
    lrFirstName String,
    lrLastName String,
    lrEmail String,
    lrPhone String,
    profileCompleted Boolean
}

entity EventLocation {
    name String required,
    state String,
    city String,
    street String,
    streetNumber String,
    latitude Float,
    longitude Float,
    capacity Integer,
    mapLink String
}

entity Sport {
	name String required
}

entity Unit {
	name String,
    abbreviation String,
}

relationship OneToOne {
    Athlete{user} to User
}

relationship ManyToMany {
	Workout{activities(name)} to Activity{workouts(name)}
    Activity{categories(name)} to ActivityCategory{activities(name)}
    Workout{categories(name)} to WorkoutCategory{workouts(name)}
    Athlete{sports(name)} to Sport{athletes(email)}
    Workout{sports(name)} to Sport{workouts(name)}
    Event{tests(name)} to Workout{events(name)}
    Event{athletes(email)} to Athlete{events(name)}
}

// defining multiple OneToMany relationships with comments
relationship OneToMany {
    AthleteEvent{athleteWorkouts} to AthleteWorkout
    AthleteWorkout{athleteActivities} to AthleteActivity
    AthleteActivity{athleteActivityResults} to AthleteActivityResult
    AthleteActivityResult{athleteActivityResultSplits} to AthleteActivityResultSplit

    Event{athleteEvents} to AthleteEvent
    Activity{activityResults} to ActivityResult
    ActivityResult{resultSplits} to ActivityResultSplit
    ActivityCategory{childActivityCategories} to ActivityCategory{parentActivityCategory}
}

relationship ManyToOne {
	AthleteEvent{athlete required} to Athlete
    AthleteWorkout{workout(name) required} to Workout
    AthleteActivity{activity(name) required} to Activity
    AthleteActivityResult{activityResult(name) required} to ActivityResult
    AthleteActivityResultSplit{activityResultSplit(id) required} to ActivityResultSplit
    Event{eventLocation(name)} to EventLocation
    ActivityResult{resultUnit(name)} to Unit
    Activity{targetUnit(name)} to Unit
    ActivityResultSplit{splitUnit(name)} to Unit
}

// Set pagination options
paginate * with pagination

dto * with mapstruct

// Set service options to all except few
service all with serviceImpl
